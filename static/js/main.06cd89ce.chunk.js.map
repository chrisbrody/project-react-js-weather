{"version":3,"sources":["components/Form.js","components/Titles.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","name","placeholder","Titles","className","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","cod","setState","message","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAwBeA,EArBF,SAACC,GAAD,OACT,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,iDCiBOC,EArBA,kBACX,6BACI,wBAAIC,UAAU,0BAAd,kBACA,uBAAGA,UAAU,6BAAb,kDCkCOC,EArCC,SAACR,GAAD,OACZ,yBAAKO,UAAU,iBACTP,EAAMS,MAAQT,EAAMU,SAAW,uBAAGH,UAAU,gBAAb,aAAsC,0BAAMA,UAAU,kBAAmBP,EAAMS,KAAzC,KAAmDT,EAAMU,UAC9HV,EAAMW,aAAe,uBAAGJ,UAAU,gBAAb,gBAAyC,0BAAMA,UAAU,kBAAmBP,EAAMW,cACvGX,EAAMY,UAAY,uBAAGL,UAAU,gBAAb,aAAsC,0BAAMA,UAAU,kBAAmBP,EAAMY,WACjGZ,EAAMa,aAAe,uBAAGN,UAAU,gBAAb,gBAAyC,0BAAMA,UAAU,kBAAmBP,EAAMa,cACvGb,EAAMc,OAAS,uBAAGP,UAAU,gBAAb,UAAmC,0BAAMA,UAAU,kBAAmBP,EAAMc,UCF/FC,EAAQ,mCAoFCC,E,2MAhFXC,MAAQ,CACJN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAIXhB,WAAa,SAAOiB,GAAP,qBAAAC,EAAAC,OAAA,uDAETF,EAAEG,iBAGIb,EAAOU,EAAEI,OAAOC,SAASf,KAAKgB,MAAQN,EAAEI,OAAOC,SAASf,KAAKgB,MAAQ,WACrEf,EAAUS,EAAEI,OAAOC,SAASd,QAAQe,MAAQN,EAAEI,OAAOC,SAASd,QAAQe,MAAQ,KAN3E,WAAAL,EAAA,MAUcM,MAAM,qDAAD,OAAsDjB,EAAtD,YAA8DC,EAA9D,kBAA+EK,EAA/E,qBAVnB,cAUHY,EAVG,kBAAAP,EAAA,MAaUO,EAASC,QAbnB,UAaHC,EAbG,OAcTC,QAAQC,IAAIF,EAAKG,IAAkB,QAAbH,EAAKG,KAEX,QAAbH,EAAKG,IAhBC,wBAiBL,EAAKC,SAAS,CACVnB,MAAOe,EAAKK,UAlBX,2BAuBNzB,GAAQC,EAEP,EAAKuB,SAAS,CACVtB,YAAakB,EAAKM,KAAKC,KACvB3B,KAAMoB,EAAKzB,KACXM,QAASmB,EAAKQ,IAAI3B,QAClBE,SAAUiB,EAAKM,KAAKvB,SACpBC,YAAagB,EAAKS,QAAQ,GAAGzB,YAC7BC,MAAO,KAGX,EAAKmB,SAAS,CACVnB,MAAOe,EAAKK,UAnCX,uC,wEAyCT,OACI,6BACI,yBAAK3B,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,4BACX,kBAAC,EAAD,OAFR,IAII,yBAAKA,UAAU,2BACX,kBAAC,EAAD,CAAML,WAAYqC,KAAKrC,aACvB,kBAAC,EAAD,CACIS,YAAa4B,KAAKtB,MAAMN,YACxBC,SAAU2B,KAAKtB,MAAML,SACrBH,KAAM8B,KAAKtB,MAAMR,KACjBC,QAAS6B,KAAKtB,MAAMP,QACpBG,YAAa0B,KAAKtB,MAAMJ,YACxBC,MAAOyB,KAAKtB,MAAMH,SAZ9B,KADJ,KADJ,KADJ,KADJ,U,GAtDM0B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.06cd89ce.chunk.js","sourcesContent":["import  React from 'react';\n\n// if rendering only 1 block you can do it like this\nconst Form = (props) => (\n    <form onSubmit={props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"City\" />\n        <input type=\"text\" name=\"country\" placeholder=\"Country\" />\n        <button>Get Weather</button>\n    </form>\n)\n\n\n// class Form extends React.Component {\n//     render() {\n//         return (\n//             <form onSubmit={this.props.getWeather}>\n//                 <input type=\"text\" name=\"city\" placeholder=\"City\" />\n//                 <input type=\"text\" name=\"country\" placeholder=\"Country\" />\n//                 <button>Get Weather</button>\n//             </form>\n//         );\n//     }\n// }\n\nexport default Form;","import  React from 'react';\n\n// if rendering only 1 block you can do it like this\nconst Titles = () => (\n    <div>\n        <h1 className=\"title-container__title\">Weather Finder</h1>\n        <p className=\"title-container__subtitle\">Find out temperature, conditions and more...</p>\n    </div>\n)\n\n\n\n// class Titles extends React.Component {\n\n//     render() {\n//         return (\n//             <div>\n//                 <h1>Weather Finder</h1>\n//                 <p>Find out temperature, conditions and more...</p>\n//             </div>\n//         );\n//     }\n// }\n\nexport default Titles;","import  React from 'react';\n\n// if rendering only 1 block you can do it like this\nconst Weather = (props) => (\n    <div className=\"weather__info\">\n        { props.city && props.country && <p className=\"weather__key\">Location: <span className=\"weather__value\">{ props.city }, { props.country }</span></p> }\n        { props.temperature && <p className=\"weather__key\">Temperature: <span className=\"weather__value\">{ props.temperature }</span></p> }\n        { props.humidity && <p className=\"weather__key\">Humidity: <span className=\"weather__value\">{ props.humidity }</span></p> }\n        { props.description && <p className=\"weather__key\">Description: <span className=\"weather__value\">{ props.description }</span></p> }\n        { props.error && <p className=\"weather__key\">Error: <span className=\"weather__error\">{ props.error }</span></p> }\n    </div>\n)\n\n// using stateless option\n// const Weather = (props) => {\n//     return(\n//         <div>\n//             { props.city && props.country && <p>Location: { props.city }, { props.country }</p> }\n//             { props.temperature && <p>Temperature: { props.temperature }</p> }\n//             { props.humidity && <p>Humidity: { props.humidity }</p> }\n//             { props.description && <p>Description: { props.description }</p> }\n//             { props.error && <p>Error: { props.error }</p> }\n//         </div>\n//     )\n// }\n// using state option\n// class Weather extends React.Component {\n//     render() {\n//         return (\n//             <div>\n//                 { this.props.city && this.props.country && <p>Location: { this.props.city }, { this.props.country }</p> }\n//                 { this.props.temperature && <p>Temperature: { this.props.temperature }</p> }\n//                 { this.props.humidity && <p>Humidity: { this.props.humidity }</p> }\n//                 { this.props.description && <p>Description: { this.props.description }</p> }\n//                 { this.props.error && <p>Error: { this.props.error }</p> }\n//             </div>\n//         );\n//     }\n// }\n\nexport default Weather;","import React from 'react';\n\n// custom components\nimport Form from './components/Form';\nimport Titles from './components/Titles';\nimport Weather from './components/Weather';\n\nconst API_KEY=\"485fd9ba4845fb46172cb7240a6cde40\";\n\nclass App extends React.Component {\n    // create property:value pairs for state\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: undefined\n    }\n\n\n    getWeather = async (e) => {\n        // prevent default behavoir of onSubmit\n        e.preventDefault();\n\n        // get values of user input\n        const city = e.target.elements.city.value ? e.target.elements.city.value : \"New York\"\n        const country = e.target.elements.country.value ? e.target.elements.country.value : \"US\";\n        // console.log(city, country)\n\n        // make api call\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n        \n        // convert to JSON format\n        const data = await api_call.json();\n        console.log(data.cod, data.cod === \"404\")\n\n        if(data.cod === \"404\") {\n            this.setState({\n                error: data.message\n            });\n            return\n        }\n\n        if(city && country) {\n            // update the state if there is a city and country\n            this.setState({\n                temperature: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description,\n                error: \"\"\n            });\n        } else {\n            this.setState({\n                error: data.message\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"wrapper\">\n                    <div className=\"main\">\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-md-5 title-container\">\n                                    <Titles />\n                                </div> {/* col-xs-5 title-container */}\n                                <div className=\"col-md-7 form-container\">\n                                    <Form getWeather={this.getWeather} />\n                                    <Weather \n                                        temperature={this.state.temperature} \n                                        humidity={this.state.humidity}\n                                        city={this.state.city}\n                                        country={this.state.country}\n                                        description={this.state.description}\n                                        error={this.state.error}\n                                    />\n                                </div> {/* col-xs-7 form-container */}\n                            </div> {/* .row */}\n                        </div> {/* .container */}\n                    </div> {/* .main */}\n                </div>  {/* .wrapper */}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}